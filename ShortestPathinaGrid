T.c --> O(n)
S.c --> O(h)

class Solution {
    public int shortestPath(int[][] grid, int k) {
        int m = grid.length;
        int n = grid[0].length;
        if(grid == null){
            return 0;
        }
        boolean[][][] visited = new boolean[m][n][k+1];
        Queue<int []> q = new LinkedList<>();
        visited[0][0][k] = true;
        q.add(new int[]{0,0,k});
        int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};
        int min = 0;
        while(!q.isEmpty()){
          int size = q.size();
          for(int i =0; i<size; i++){
                int[] curr = q.poll();
                if(curr[0] == m-1 && curr[1] == n-1){
                    return min;
                }
            for(int[] dir: dirs){
                int r = curr[0]+dir[0];
                int c = curr[1]+dir[1];
                if(r >=0 && r <m && c >=0 && c<n){
                    int K = curr[2] - grid[r][c];
                    if(K >=0 && !visited[r][c][K]){
                        visited[r][c][K] = true;
                        q.add(new int[]{r,c,K});                    
                    }
                }
            }
          }
          min++;          
        }
        return -1;
    }
}